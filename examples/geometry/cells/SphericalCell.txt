# TOPAS-nBio example: simple spherical cell
# To include a nucleus at the center of the cell, specify the nucleus radius. 
# To include mitochondria, randomly positioned in the cytoplasm, specify the number of mito.
# 
#
# Since mitochondria are arranged randomly, this check should be switched off, overlap checking is still done 
# and when an overlap is detected the overlapping components are rearranged. 
b:Ge/QuitIfOverlapDetected="false"

# Note: Having a very large number of mitochondria will slow down the code. 
# Ensure the volume is big enough to accommodate all mitochondria defined, otherwise the code may get stuck in a loop. 

d:Ge/World/HLX=50. um
d:Ge/World/HLY=50. um
d:Ge/World/HLZ=50. um
b:Ge/World/Invisible = "True"

s:Ge/MyCell/Type="TsSphericalCell"
s:Ge/MyCell/Material="G4_WATER"
s:Ge/MyCell/Parent="World"
d:Ge/MyCell/CellRadius=10 um
s:Ge/MyCell/Color="white"

#Nucleus
d:Ge/MyCell/Nucleus/NucleusRadius = 6 um
s:Ge/MyCell/Nucleus/Material="G4_WATER"
s:Ge/MyCell/Nucleus/Color="red"
#s:Ge/MyCell/Nucleus/DrawingStyle="solid"
d:Ge/MyCell/Nucleus/transNucZ = 0. um

# Spherical envelope
#s:Ge/MyCell/Type              = "TsRandomCylindersInComponent"
#s:Ge/MyCell/Material          = "G4_WATER"
#s:Ge/MyCell/Color             = "blue"
#d:Ge/MyCell/RMax              = Ge/MyCell/Nucleus/NucleusRadius um
#b:Ge/MyCell/GenerateCylinders = "True"
#s:Ge/MyCell/InputFile        = "RandomCylinders_positions_nm_rotations_deg.txt"
# Dimensions for random cylinders
#d:Ge/MyCell/Cylinders/RMax    = 1 nm
#d:Ge/MyCell/Cylinders/HL      = 1 um
#s:Ge/MyCell/Cylinders/Material = "G4_WATER"
#s:Ge/MyCell/Cylinders/Color    = "yellow"
#s:Ge/MyCell/Cylinders/DrawingStyle = "Solid"


#Mitochondria
i:Ge/MyCell/Mitochondria/NumberOfMitochondria=4
d:Ge/MyCell/Mitochondria/a=1 um
d:Ge/MyCell/Mitochondria/b=1 um
d:Ge/MyCell/Mitochondria/c=3.4 um
s:Ge/MyCell/Mitochondria/Material="G4_WATER"
s:Ge/MyCell/Mitochondria/Color="grass"
s:Ge/MyCell/Mitochondria/DrawingStyle="solid"

Ph/Default/Modules = 1 "g4em-dna"

# Set a source
s:So/Example/Type                     = "Beam"
s:So/Example/Component                = "BeamPosition"
s:So/Example/BeamParticle             = "proton"
d:So/Example/BeamEnergy               = 1.5 MeV
u:So/Example/BeamEnergySpread         = 0.0
s:So/Example/BeamPositionDistribution = "None"
s:So/Example/BeamAngularDistribution  = "Gaussian"
d:So/Example/BeamAngularCutoffX       = 90. deg
d:So/Example/BeamAngularCutoffY       = 90. deg
d:So/Example/BeamAngularSpreadX       = 0.01 rad
d:So/Example/BeamAngularSpreadY       = 0.01 rad
i:So/Example/NumberOfHistoriesInRun   = 10

s:Sc/Energy/Quantity                  = "EnergyDeposit"
s:Sc/Energy/Component                 = "MyCell"
b:Sc/Energy/OutputToConsole           = "TRUE"
s:Sc/Energy/IfOutputFileAlreadyExists = "Overwrite"
b:Sc/Energy/PropagateToChildren = "True"

#Score dose to cell
s:Sc/CellScorer/Quantity = "DoseToMedium"
s:Sc/CellScorer/Component = "MyCell"
b:Sc/CellScorer/OutputToConsole = "TRUE"
b:Sc/CellScorer/PropagateToChildren = "true"
s:Sc/CellScorer/IfOutputFileAlreadyExists = "overwrite"

#Score in the Cell components
s:Sc/OrganelleScorer/Quantity = "TsNtupleForCell"
s:Sc/OrganelleScorer/Component = "MyCell"
s:Sc/OrganelleScorer/IfOutputFileAlreadyExists = "Overwrite"  
s:Sc/OrganelleScorer/OutputType = "ASCII" 
s:Sc/OrganelleScorer/OutputFile = "EdepToOrganelles"
b:Sc/OrganelleScorer/PropagateToChildren = "true"

s:Gr/ViewA/Type = "OpenGL"
i:Gr/ViewA/WindowSizeX = 1024
i:Gr/ViewA/WindowSizeY = 768
u:Gr/ViewA/Zoom = 1.

Ts/PauseBeforeQuit = "False"
b:Ts/ShowCPUTime = "True"
